// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                     String    @id @default(cuid())
    email                  String    @unique
    username               String    @unique
    firstName              String
    lastName               String
    password               String
    avatar                 String?
    bio                    String?
    location               String?
    website                String?
    githubUsername         String?
    linkedinUrl            String?
    twitterHandle          String?
    isEmailVerified        Boolean   @default(false)
    emailVerificationToken String?
    resetPasswordToken     String?
    resetPasswordExpires   DateTime?
    role                   UserRole  @default(USER)
    isActive               Boolean   @default(true)
    xpPoints               Int       @default(0)
    level                  Int       @default(1)
    streak                 Int       @default(0)
    lastActiveDate         DateTime  @default(now())
    lastLoginAt            DateTime?
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt

    // Relations
    enrollments  Enrollment[]
    submissions  Submission[]
    progress     Progress[]
    certificates Certificate[]
    posts        Post[]
    comments     Comment[]
    likes        Like[]
    achievements UserAchievement[]
    
    // School and Club Relations
    schoolAdmin   School[]   @relation("SchoolAdmin")
    schoolStudents School[]  @relation("SchoolStudents")
    schoolApprover School[]  @relation("SchoolApprover")
    clubCreator   Club[]     @relation("ClubCreator")
    clubMembers   ClubMember[]
    
    // Course Relations
    createdCourses Course[]
    courseEnrollments CourseEnrollment[]
    quizAttempts QuizAttempt[]
    examAttempts ExamAttempt[]
    userAnswers UserAnswer[]
    aiCourseRequests AICourseRequest[]

    @@map("users")
}

model Track {
    id               String     @id @default(cuid())
    title            String
    slug             String     @unique
    description      String     @db.Text
    shortDescription String?
    thumbnail        String?
    difficulty       Difficulty
    category         Category
    estimatedHours   Int
    price            Float      @default(0)
    isPublished      Boolean    @default(false)
    isPremium        Boolean    @default(false)
    prerequisites    String?    @db.Text
    learningOutcomes String?    @db.Text
    tags             String?    @db.Text
    sortOrder        Int        @default(0)
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt

    // Relations
    lessons     Lesson[]
    enrollments Enrollment[]
    courses     Course[]
    certificates Certificate[]

    @@map("tracks")
}

model Course {
    id               String     @id @default(cuid())
    title            String
    slug             String     @unique
    description      String     @db.Text
    shortDescription String?
    thumbnail        String?
    difficulty       Difficulty
    category         Category
    estimatedHours   Int
    price            Float      @default(0)
    isPublished      Boolean    @default(false)
    isPremium        Boolean    @default(false)
    prerequisites    String?    @db.Text
    learningOutcomes String?    @db.Text
    tags             String?    @db.Text
    sortOrder        Int        @default(0)
    isAIGenerated    Boolean    @default(false)
    aiRequestId      String?    @unique
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt

    // Relations
    creatorId        String
    creator          User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    trackId          String?
    track            Track?     @relation(fields: [trackId], references: [id], onDelete: SetNull)
    lessons          Lesson[]
    enrollments      CourseEnrollment[]
    quizzes          Quiz[]
    exams            Exam[]
    certificates     Certificate[]
    aiRequest        AICourseRequest? @relation(fields: [aiRequestId], references: [id])

    @@map("courses")
}

model Lesson {
    id          String   @id @default(cuid())
    title       String
    slug        String
    content     String   @db.Text
    videoUrl    String?
    duration    Int? // in minutes
    sortOrder   Int
    isPublished Boolean  @default(false)
    trackId     String?
    courseId    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    track      Track?      @relation(fields: [trackId], references: [id], onDelete: Cascade)
    course     Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
    challenges Challenge[]
    progress   Progress[]

    @@unique([trackId, slug])
    @@unique([courseId, slug])
    @@map("lessons")
}

model Challenge {
    id           String     @id @default(cuid())
    title        String
    slug         String     @unique
    description  String     @db.Text
    instructions String     @db.Text
    starterCode  String?    @db.Text
    solutionCode String?    @db.Text
    testCases    String     @db.Text // JSON
    difficulty   Difficulty
    category     Category
    points       Int        @default(10)
    timeLimit    Int? // in minutes
    memoryLimit  Int? // in MB
    isPublished  Boolean    @default(false)
    tags         String?    @db.Text
    lessonId     String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    // Relations
    lesson      Lesson?      @relation(fields: [lessonId], references: [id], onDelete: SetNull)
    submissions Submission[]

    @@map("challenges")
}

model Quiz {
    id           String   @id @default(cuid())
    title        String
    description  String?  @db.Text
    duration     Int? // in minutes
    passingScore Int      @default(70)
    isPublished  Boolean  @default(false)
    maxAttempts  Int      @default(3)
    courseId     String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
    questions   Question[]
    attempts    QuizAttempt[]

    @@map("quizzes")
}

model Exam {
    id           String   @id @default(cuid())
    title        String
    description  String?  @db.Text
    duration     Int      // in minutes
    passingScore Int      @default(70)
    isPublished  Boolean  @default(false)
    maxAttempts  Int      @default(1)
    courseId     String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
    questions   Question[]
    attempts    ExamAttempt[]

    @@map("exams")
}

model Question {
    id          String        @id @default(cuid())
    text        String        @db.Text
    type        QuestionType
    options     String?       @db.Text // JSON for multiple choice
    correctAnswer String      @db.Text
    explanation String?       @db.Text
    points      Int           @default(1)
    sortOrder   Int           @default(0)
    quizId      String?
    examId      String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    // Relations
    quiz        Quiz?         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    exam        Exam?         @relation(fields: [examId], references: [id], onDelete: Cascade)
    userAnswers UserAnswer[]

    @@map("questions")
}

model QuizAttempt {
    id          String   @id @default(cuid())
    userId      String
    quizId      String
    score       Float?
    isPassed    Boolean?
    startedAt   DateTime @default(now())
    completedAt DateTime?
    timeSpent   Int? // in minutes

    // Relations
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers     UserAnswer[]

    @@map("quiz_attempts")
}

model ExamAttempt {
    id          String   @id @default(cuid())
    userId      String
    examId      String
    score       Float?
    isPassed    Boolean?
    startedAt   DateTime @default(now())
    completedAt DateTime?
    timeSpent   Int? // in minutes

    // Relations
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    exam        Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
    answers     UserAnswer[]

    @@map("exam_attempts")
}

model UserAnswer {
    id              String   @id @default(cuid())
    userId          String
    questionId      String
    answer          String   @db.Text
    isCorrect       Boolean?
    pointsEarned    Float?
    quizAttemptId   String?
    examAttemptId   String?
    answeredAt      DateTime @default(now())

    // Relations
    user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    question        Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    quizAttempt     QuizAttempt? @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    examAttempt     ExamAttempt? @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)

    @@map("user_answers")
}

model AICourseRequest {
    id              String              @id @default(cuid())
    userId          String
    title           String
    description     String              @db.Text
    category        Category
    difficulty      Difficulty
    estimatedHours  Int
    learningGoals   String              @db.Text
    targetAudience  String              @db.Text
    prerequisites   String?             @db.Text
    status          AICourseRequestStatus @default(PENDING)
    aiResponse      String?             @db.Text // Generated course content
    errorMessage    String?             @db.Text
    processedAt     DateTime?
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt

    // Relations
    user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    generatedCourse Course?

    @@map("ai_course_requests")
}

model Enrollment {
    id          String    @id @default(cuid())
    userId      String
    trackId     String
    enrolledAt  DateTime  @default(now())
    completedAt DateTime?
    progress    Float     @default(0) // percentage

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

    @@unique([userId, trackId])
    @@map("enrollments")
}

model CourseEnrollment {
    id          String    @id @default(cuid())
    userId      String
    courseId    String
    enrolledAt  DateTime  @default(now())
    completedAt DateTime?
    progress    Float     @default(0) // percentage

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    @@unique([userId, courseId])
    @@map("course_enrollments")
}

model Progress {
    id           String    @id @default(cuid())
    userId       String
    lessonId     String
    isCompleted  Boolean   @default(false)
    timeSpent    Int       @default(0) // in minutes
    lastAccessed DateTime  @default(now())
    completedAt  DateTime?

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
    @@map("progress")
}

model Submission {
    id            String           @id @default(cuid())
    userId        String
    challengeId   String
    code          String           @db.Text
    language      String
    status        SubmissionStatus
    score         Float?
    executionTime Int? // in milliseconds
    memoryUsed    Int? // in MB
    testResults   String?          @db.Text // JSON
    feedback      String?          @db.Text
    submittedAt   DateTime         @default(now())

    // Relations
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

    @@map("submissions")
}

model Certificate {
    id               String   @id @default(cuid())
    userId           String
    trackId          String?
    courseId         String?
    title            String
    description      String?
    issuedAt         DateTime @default(now())
    certificateUrl   String?
    verificationCode String   @unique

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    track  Track? @relation(fields: [trackId], references: [id], onDelete: SetNull)
    course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

    @@map("certificates")
}

model Achievement {
    id          String   @id @default(cuid())
    title       String
    description String
    icon        String?
    badge       String?
    points      Int      @default(0)
    criteria    String   @db.Text // JSON
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())

    // Relations
    userAchievements UserAchievement[]

    @@map("achievements")
}

model UserAchievement {
    id            String   @id @default(cuid())
    userId        String
    achievementId String
    earnedAt      DateTime @default(now())

    // Relations
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
    @@map("user_achievements")
}

model Post {
    id          String   @id @default(cuid())
    title       String
    content     String   @db.Text
    excerpt     String?
    authorId    String
    clubId      String?
    isPublished Boolean  @default(false)
    tags        String?  @db.Text
    views       Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    club     Club?     @relation(fields: [clubId], references: [id], onDelete: Cascade)
    comments Comment[]
    likes    Like[]

    @@map("posts")
}

model Comment {
    id        String   @id @default(cuid())
    content   String   @db.Text
    authorId  String
    postId    String
    parentId  String? // for nested comments
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    replies Comment[] @relation("CommentReplies")
    likes   Like[]

    @@map("comments")
}

model School {
    id              String   @id @default(cuid())
    name            String
    slug            String   @unique
    email           String   @unique
    phone           String?
    address         String   @db.Text
    city            String
    country         String   @default("Zimbabwe")
    website         String?
    description     String?  @db.Text
    logo            String?
    banner          String?
    isApproved      Boolean  @default(false)
    approvedAt      DateTime?
    approvedBy      String?
    status          SchoolStatus @default(PENDING)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    admin           User     @relation("SchoolAdmin", fields: [adminId], references: [id], onDelete: Cascade)
    adminId         String
    clubs           Club[]
    students        User[]   @relation("SchoolStudents")
    approvedByUser  User?    @relation("SchoolApprover", fields: [approvedBy], references: [id])

    @@map("schools")
}

model Club {
    id              String   @id @default(cuid())
    name            String
    slug            String   @unique
    description     String   @db.Text
    logo            String?
    banner          String?
    category        ClubCategory
    maxMembers      Int      @default(50)
    isActive        Boolean  @default(true)
    isPublic        Boolean  @default(true)
    inviteCode      String   @unique
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    schoolId        String
    creator         User     @relation("ClubCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId       String
    members         ClubMember[]
    posts           Post[]

    @@map("clubs")
}

model ClubMember {
    id          String       @id @default(cuid())
    role        ClubRole     @default(MEMBER)
    joinedAt    DateTime     @default(now())
    isActive    Boolean      @default(true)

    // Relations
    club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
    clubId      String
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    @@unique([clubId, userId])
    @@map("club_members")
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    postId    String?
    commentId String?
    createdAt DateTime @default(now())

    // Relations
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@unique([userId, commentId])
    @@map("likes")
}

// Enums
enum UserRole {
    USER
    ADMIN
    INSTRUCTOR
}

enum Difficulty {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    EXPERT
}

enum Category {
    WEB_DEVELOPMENT
    MOBILE_DEVELOPMENT
    DATA_SCIENCE
    MACHINE_LEARNING
    DEVOPS
    CYBERSECURITY
    GAME_DEVELOPMENT
    BLOCKCHAIN
    API_DEVELOPMENT
    DATABASE
    ALGORITHMS
    SYSTEM_DESIGN
    PROGRAMMING_FUNDAMENTALS
    FRONTEND_DEVELOPMENT
    BACKEND_DEVELOPMENT
    FULL_STACK_DEVELOPMENT
    CLOUD_COMPUTING
    ARTIFICIAL_INTELLIGENCE
    INTERNET_OF_THINGS
    SOFTWARE_TESTING
}

enum SubmissionStatus {
    PENDING
    ACCEPTED
    WRONG_ANSWER
    TIME_LIMIT_EXCEEDED
    MEMORY_LIMIT_EXCEEDED
    RUNTIME_ERROR
    COMPILATION_ERROR
}

enum SchoolStatus {
    PENDING
    APPROVED
    REJECTED
    SUSPENDED
}

enum ClubCategory {
    TECHNOLOGY
    SCIENCE
    ARTS
    SPORTS
    ACADEMIC
    CULTURAL
    ENVIRONMENTAL
    SOCIAL
    OTHER
}

enum ClubRole {
    ADMIN
    MODERATOR
    MEMBER
}

enum QuestionType {
    MULTIPLE_CHOICE
    TRUE_FALSE
    SHORT_ANSWER
    ESSAY
    CODE
}

enum AICourseRequestStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
}
